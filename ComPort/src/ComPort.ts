/*
 * This code is inspired by Googles Serial Api example
 * https://codelabs.developers.google.com/codelabs/web-serial/
 * 
 * Danial Chitnis 2020
 */

 /**
  * The types of events generated by ComPort
  */
 type ComEventType = "rx" | "log";

 /**
  *  The main class for ComPort package
  */
 export class ComPort {
    
  private port: SerialPort;
  private reader: ReadableStreamDefaultReader;
  private outputStream: WritableStream<string>;
  private inputDone: Promise<void>;
  private outputDone: Promise<void>;
  private strRX = "";

  private comEvent: EventTarget;
    
  /**
   * creates a ComPort object
   */
  constructor() {
    this.comEvent = new EventTarget();
  }

  async disconnect(): Promise<void> {
    if (this.port) {
      if (this.reader) {
        await this.reader.cancel();
        await this.inputDone.catch((e) => {console.log(e);});
        this.reader = null;
        this.inputDone = null;
      }
      if (this.outputStream) {
        await this.outputStream.getWriter().close();
        await this.outputDone.catch((e) => {console.log(e);});
        this.outputStream = null;
        this.outputDone = null;
      }
      await this.port.close();
      this.log("\nport is now closed!\n");
    }
      
  }

  private async connectSerialApi(baudrate: Baudrate): Promise<void> {
    // CODELAB: Add code to request & open port here.
    // - Request a port and open a connection.
    this.log("Requesting port...");
    this.port = await navigator.serial.requestPort();

    // - Wait for the port to open.
    this.log("Openning port...");
    await this.port.open({ baudrate: baudrate });

    // CODELAB: Add code to read the stream here.
    const decoder = new TextDecoderStream();
    this.inputDone = this.port.readable.pipeTo(decoder.writable);
    const inputStream = decoder.readable;

    const encoder = new TextEncoderStream();
    this.outputDone = encoder.readable.pipeTo(this.port.writable);
    this.outputStream = encoder.writable;

    this.reader = inputStream.getReader();
    this.readLoop();
  }


    
  private async connectToPort(baudrate: Baudrate): Promise<void> {
    // CODELAB: Add connect code here.
    try {
      await this.connectSerialApi(baudrate);
      this.log("Port is now open ðŸŽ‰");

    } catch (error) {
      this.log("Error ðŸ˜¢: " + error + "\n");
    }
      
  }

  /**
   * Connect to the serial port. This will open the request user dialog box.
   * @param baudrate : speed of connection e.g. 9600 or 115200
   */
  public connect(baudrate: Baudrate): void {
    this.connectToPort(baudrate);
  }
  
  private async readLoop(): Promise<void> {
    // CODELAB: Add read loop here.
    // eslint-disable-next-line no-constant-condition
    while (true) {
      
      try {
        const { value, done } = await this.reader.read();
        if (value) {
          this.procInput(value);
        }
        if (done) {
          console.log('[readLoop] DONE', done);
          this.reader.releaseLock();
          break;
        }
      } catch (e) {
        console.log(e);
      }
    }   
  }

  private procInput(str: string): void {
    this.strRX = this.strRX + str;
    const linesRX = this.strRX.split("\n");
    if (linesRX.length > 1) {
      
      for (let i=0; i<linesRX.length-1; i++) {
        
        const event = new CustomEvent('rx',{detail: linesRX[i]});
        this.dispatchEvent(event);

      }
      // save the reminder of the input line
      this.strRX = linesRX[ linesRX.length-1 ];
    }
        
  }

  private log(str: string): void {
    const event = new CustomEvent("log",{detail:str});
    this.dispatchEvent(event);
  }

  /**
   * Adds a event listnere type for ComPort
   * @param eventType either two types of event rx or rx-msg
   * @param listener a function callback for CustomEvent
   */
  public addEventListener(eventType: ComEventType, listener: (this: this, ev: CustomEvent<string>) => void): void {
    this.comEvent.addEventListener(eventType, listener);
  }

  public removeEventListener(): void {
    //
  }

  private dispatchEvent(event: Event): boolean {
    return this.comEvent.dispatchEvent(event);
  }

  private async writeToStream(line: string): Promise<void> {
    // CODELAB: Write to output stream
    const writer = this.outputStream.getWriter();
    //console.log('[SEND]', line);
    await writer.write(line + '\n');
    writer.releaseLock();
  }

  /**
   * Send a line of String
   * @param line : a line of string. The \n character will be added to end of the line
   */
  public sendLine(line: string): void {
    this.writeToStream(line);
  }
  
 }